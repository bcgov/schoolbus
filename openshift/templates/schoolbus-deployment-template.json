{
  "kind": "Template",
  "apiVersion": "v1",
  "metadata": {
    "name": "moti-dotnecore-stack",
    "annotations": {
      "description": "Contains frontend, middleware, backend and database tiers.",
      "tags": "schoolbus,aspnetcore,pgsql",
      "iconClass": "icon-github"
    }
  },
  "labels": {
    "template": "schoolbus-deployment"
  },
  "objects": [
    {
      "kind": "PersistentVolumeClaim",
      "apiVersion": "v1",
      "metadata": {
        "name": "${DATABASE_SERVICE_NAME}-pvc"
      },
      "spec": {
        "accessModes": [
          "ReadWriteOnce"
        ],
        "resources": {
          "requests": {
            "storage": "${DATABASE_VOLUME_CAPACITY}"
          }
        }
      }
    },
    {
      "kind": "PersistentVolumeClaim",
      "apiVersion": "v1",
      "metadata": {
        "name": "${BACKEND_NAME}-docs-pvc"
      },
      "spec": {
        "accessModes": [
          "ReadWriteOnce"
        ],
        "resources": {
          "requests": {
            "storage": "${DOCUMENT_VOLUME_CAPACITY}"
          }
        }
      }
    },
    {
      "kind": "Service",
      "apiVersion": "v1",
      "metadata": {
        "name": "${FRONTEND_NAME}",
        "annotations": {
          "description": "Exposes and load balances the client"
        }
      },
      "spec": {
        "ports": [
          {
            "name": "web",
			"protocol": "TCP",
            "port": 8080,
            "targetPort": 8080
          }
        ],
        "selector": {
          "app": "${FRONTEND_NAME}"
        }
      }
    },
    {
      "kind": "DeploymentConfig",
      "apiVersion": "v1",
      "metadata": {
        "name": "${FRONTEND_NAME}",
        "annotations": {
          "description": "Defines how to deploy the frontend server"
        }
      },
      "spec": {
        "strategy": {
          "type": "Rolling",
		  "rollingParams": {
                "updatePeriodSeconds": 1,
                "intervalSeconds": 1,
                "timeoutSeconds": 600,
                "maxUnavailable": "25%",
                "maxSurge": "25%"
            },
            "resources": {}
        },
        "triggers": [		
          {
            "type": "ConfigChange"
          },
          {
            "type": "ImageChange",
            "imageChangeParams": {
              "automatic": true,
              "containerNames": [
                "${FRONTEND_NAME}"
              ],
              "from": {
                "kind": "ImageStreamTag",
                "namespace": "${APP_IMAGE_NAMESPACE}",
                "name": "${FRONTEND_IMAGE_NAME}:${APP_DEPLOYMENT_TAG}"
              }
            }
          }
        ],
        "replicas": 1,
        "selector": {
          "name": "${FRONTEND_NAME}"
        },
        "template": {
          "metadata": {
            "name": "${FRONTEND_NAME}",
            "labels": {
              "name": "${FRONTEND_NAME}",
			  "app": "${FRONTEND_NAME}"
            }
          },
          "spec": {
            "containers": [
              {
                "name": "${FRONTEND_NAME}",
                "image": " ",
                "ports": [
                  {
                    "containerPort": 8080,
					"protocol": "TCP"
                  }
                ],
                "env": [
                  {
                    "name": "MIDDLEWARE_NAME",
                    "value": "${MIDDLEWARE_NAME}:8080"
                  },
                  {
                    "name": "BACKEND_NAME",
                    "value": "${BACKEND_NAME}:8080"
                  },
                  {
                    "name": "POSTGRESQL_DATABASE",
                    "value": "${DATABASE_NAME}"
                  },
                  {
                    "name": "ADMINPW",
                    "value": "${SCHOOLBUS_ADMINPW}"
                  }
                ],
                "readinessProbe": {
                  "timeoutSeconds": 3000,
                  "initialDelaySeconds": 3,
                  "httpGet": {
                    "path": "${FRONTEND_READINESS_PROBE_URL}",
                    "port": 8080
                  }
                },
                "livenessProbe": {
                  "timeoutSeconds": 3000,
                  "initialDelaySeconds": 30,
                  "httpGet": {
                    "path": "${FRONTEND_READINESS_PROBE_URL}",
                    "port": 8080
                  }
                },
                "resources": {
                  "limits": {
                    "memory": "${FRONTEND_MEMORY_LIMIT}"
                  }
                }                
              }
            ]            
          }
        }
      }
    },
	{
      "kind": "Service",
      "apiVersion": "v1",
      "metadata": {
        "name": "${MIDDLEWARE_NAME}",
        "annotations": {
          "description": "Exposes and load balances the middleware pods"
        }
      },
      "spec": {
        "ports": [
			{
				"name": "web",
				"protocol": "TCP",
				"port": 8080,
				"targetPort": 8080
			},
			{
				"name": "metrics",
				"containerPort": 9779,
				"port": 9779,
				"protocol": "TCP"
			},
			{
				"name": "jolokia",
				"containerPort": 8778,
				"port": 8778,				
				"protocol": "TCP"
			}
        ],
        "selector": {
          "app": "${MIDDLEWARE_NAME}"
        }
      }
    },
    {
		"kind": "DeploymentConfig",
		"apiVersion": "v1",
		"metadata": {
			"name": "${MIDDLEWARE_NAME}",
			"generation": 1,
			"creationTimestamp": null,
			"labels": {
				"app": "${MIDDLEWARE_NAME}",
				"component": "fuse-server",
				"container": "java",
				"group": "quickstarts",
				"project": "fuse-server",
				"provider": "s2i",
				"version": "2.2.0.redhat-079"
			}
		},
		"spec": {
			"strategy": {
				"type": "Rolling",
				"rollingParams": {
					"updatePeriodSeconds": 1,
					"intervalSeconds": 1,
					"timeoutSeconds": 600,
					"maxUnavailable": "25%",
					"maxSurge": "25%"
				},
				"resources": {}
			},
			"triggers": [
				{
					"type": "ConfigChange"
				},
				{
					"type": "ImageChange",
					"imageChangeParams": {
						"automatic": true,
						"containerNames": [
							"${MIDDLEWARE_NAME}"
						],
						"from": {
							"kind": "ImageStreamTag",
							"namespace": "${APP_IMAGE_NAMESPACE}",
							"name": "${MIDDLEWARE_IMAGE_NAME}:${APP_DEPLOYMENT_TAG}"
						}
					}
				}
			],
			"replicas": 1,
			"test": false,
			"selector": {
				"component": "${MIDDLEWARE_NAME}",
				"container": "java",
				"deploymentconfig": "${MIDDLEWARE_NAME}",
				"group": "quickstarts",
				"project": "${MIDDLEWARE_NAME}",
				"provider": "s2i",
				"version": "2.2.0.redhat-079"
			},
			"template": {
				"metadata": {
					"creationTimestamp": null,
					"labels": {
						"app": "${MIDDLEWARE_NAME}",
						"component": "${MIDDLEWARE_NAME}",
						"container": "java",
						"deploymentconfig": "${MIDDLEWARE_NAME}",
						"group": "quickstarts",
						"project": "${MIDDLEWARE_NAME}",
						"provider": "s2i",
						"version": "2.2.0.redhat-079"
					},
					"annotations": {
						"openshift.io/generated-by": "OpenShiftNewApp"
					}
				},
				"spec": {
					"containers": [
						{
							"name": "${MIDDLEWARE_NAME}",
							"image": "library/fuse-server:latest",
							"ports": [
								{
									"name": "http",
									"containerPort": 8080,
									"protocol": "TCP"
								},
								{
									"name": "metrics",
									"containerPort": 9779,
									"protocol": "TCP"
								},
								{
									"name": "jolokia",
									"containerPort": 8778,
									"protocol": "TCP"
								}
							],
							"env": [
								{
									"name": "HTTP_PORT",
									"value": "8080"
								},
								{
									"name": "BACKEND_NAME",
									"value": "${BACKEND_NAME}:8080"
								}
							],
							"resources": {},
							"readinessProbe": {
								"exec": {
									"command": [
										"/bin/bash",
										"-c",
										"(curl -f 127.0.0.1:8080) \u003e/dev/null 2\u003e\u00261; test $? != 7"
									]
								},
								"initialDelaySeconds": 30,
								"timeoutSeconds": 5,
								"periodSeconds": 10,
								"successThreshold": 1,
								"failureThreshold": 3
							},
							"livenessProbe": {
								"exec": {
									"command": [
										"/bin/bash",
										"-c",
										"(curl -f 127.0.0.1:8080) \u003e/dev/null 2\u003e\u00261; test $? != 7"
									]
								},
								"initialDelaySeconds": 30,
								"timeoutSeconds": 5,
								"periodSeconds": 10,
								"successThreshold": 1,
								"failureThreshold": 3
							},
							"terminationMessagePath": "/dev/termination-log",
							"imagePullPolicy": "Always"
						}
					],
					"restartPolicy": "Always",
					"terminationGracePeriodSeconds": 30,
					"dnsPolicy": "ClusterFirst",
					"securityContext": {}
				}
			}
		},
		"status": {}
	},	
	{
      "kind": "Service",
      "apiVersion": "v1",
      "metadata": {
        "name": "${BACKEND_NAME}",
        "annotations": {
          "description": "Exposes and load balances the application pods"
        }
      },
      "spec": {
        "ports": [
          {
            "name": "web",
			"protocol": "TCP",
            "port": 8080,
            "targetPort": 8080
          }
        ],
        "selector": {
          "name": "${BACKEND_NAME}"
        }
      }
    },
    {
      "kind": "DeploymentConfig",
      "apiVersion": "v1",
      "metadata": {
        "name": "${BACKEND_NAME}",
        "annotations": {
          "description": "Defines how to deploy the backend server"
        }
      },
      "spec": {
        "strategy": {
          "type": "Rolling",
		  "rollingParams": {
                "updatePeriodSeconds": 1,
                "intervalSeconds": 1,
                "timeoutSeconds": 600,
                "maxUnavailable": "25%",
                "maxSurge": "25%"
            },
            "resources": {}
        },
        "triggers": [		
          {
            "type": "ConfigChange"
          },
          {
            "type": "ImageChange",
            "imageChangeParams": {
              "automatic": true,
              "containerNames": [
                "${BACKEND_NAME}"
              ],
              "from": {
                "kind": "ImageStreamTag",
                "namespace": "${APP_IMAGE_NAMESPACE}",
                "name": "${BACKEND_IMAGE_NAME}:${APP_DEPLOYMENT_TAG}"
              }
            }
          }
        ],
        "replicas": 1,
        "selector": {
          "name": "${BACKEND_NAME}"
        },
        "template": {
          "metadata": {
            "name": "${BACKEND_NAME}",
            "labels": {
              "name": "${BACKEND_NAME}"
            }
          },
          "spec": {
            "containers": [
              {
                "name": "${BACKEND_NAME}",
                "image": " ",
                "ports": [
                  {
                    "containerPort": 8080,
					"protocol": "TCP"
                  }
                ],
                "env": [
                  {
                    "name": "DATABASE_SERVICE_NAME",
                    "value": "${DATABASE_SERVICE_NAME}"
                  },
                  {
                    "name": "POSTGRESQL_USER",
                    "value": "${DATABASE_USER}"
                  },
                  {
                    "name": "POSTGRESQL_PASSWORD",
                    "value": "${DATABASE_PASSWORD}"
                  },
                  {
                    "name": "POSTGRESQL_DATABASE",
                    "value": "${DATABASE_NAME}"
                  },
                  {
                    "name": "ADMINPW",
                    "value": "${SCHOOLBUS_ADMINPW}"
                  }
                ],
                "readinessProbe": {
                  "timeoutSeconds": 3000,
                  "initialDelaySeconds": 3,
                  "httpGet": {
                    "path": "${BACKEND_READINESS_PROBE_URL}",
                    "port": 8080
                  }
                },
                "livenessProbe": {
                  "timeoutSeconds": 3000,
                  "initialDelaySeconds": 30,
                  "httpGet": {
                    "path": "${BACKEND_READINESS_PROBE_URL}",
                    "port": 8080
                  }
                },
                "resources": {
                  "limits": {
                    "memory": "${BACKEND_MEMORY_LIMIT}"
                  }
                },
                "volumeMounts": [
                  {
                    "name": "${BACKEND_NAME}-docs",
                    "mountPath": "${DOCUMENT_MOUNT_PATH}"
                  }
                ]
              }
            ],
            "volumes": [
              {
                "name": "${BACKEND_NAME}-docs",
                "persistentVolumeClaim": {
                  "claimName": "${BACKEND_NAME}-docs-pvc"
                }
              }
            ]
          }
        }
      }
    },	
    {
      "kind": "Service",
      "apiVersion": "v1",
      "metadata": {
        "name": "${DATABASE_SERVICE_NAME}",
        "annotations": {
          "description": "Exposes the database server"
        }
      },
      "spec": {
        "ports": [
          {
            "name": "postgres",
			"protocol": "TCP",
            "port": 5432,
            "targetPort": 5432,
			"nodePort": 0
          }
        ],
        "selector": {
          "app": "${DATABASE_SERVICE_NAME}"
        },
        "type": "ClusterIP",
        "sessionAffinity": "None"
      },
	   "status": {
        "loadBalancer": {}
      }
    },	
	{
		"kind": "DeploymentConfig",
		"apiVersion": "v1",
		"metadata": {
			"name": "${DATABASE_SERVICE_NAME}",
			"generation": 1,
			"creationTimestamp": null,
			"labels": {
						"app": "${DATABASE_SERVICE_NAME}"
			},			
			"annotations": {
				"description": "Defines how to deploy the database",
				"openshift.io/container.postgresql.image.entrypoint": "[\"container-entrypoint\",\"run-postgresql\"]"
			}
		},
		"spec": {
			"strategy": {
				"type": "Recreate"				
			},
			"triggers": [
				{
					"type": "ConfigChange"
				},
				{
					"type": "ImageChange",
					"imageChangeParams": {
						"automatic": true,
						"containerNames": [
							"postgres"
						],
						"from": {
							"kind": "ImageStreamTag",
							"namespace":  "${POSTGRES_IMAGE_NAMESPACE}",
							"name": "postgres:9.4"
						}						
					}
				}
			],
			"replicas": 1,
			"test": false,
			"selector": {
				"app": "${DATABASE_SERVICE_NAME}",
				"deploymentconfig": "${DATABASE_SERVICE_NAME}"
			},
				
			"template": {
				"metadata": {
					"creationTimestamp": null,
					"labels": {
						"app": "${DATABASE_SERVICE_NAME}",
						"deploymentconfig": "${DATABASE_SERVICE_NAME}"
					},
					"annotations": {
						"openshift.io/container.postgresql.image.entrypoint": "[\"container-entrypoint\",\"run-postgresql\"]"
					}
				},
				"spec": {
					"volumes": [
						{
							"name": "${DATABASE_SERVICE_NAME}-data",
							"persistentVolumeClaim": {
								"claimName": "${DATABASE_SERVICE_NAME}-pvc"
							}
						}
					],
					"containers": [
						{
							"name": "postgres",
							"image": "registry.access.redhat.com/rhscl/postgresql-94-rhel7",
							"ports": [
								{
									"containerPort": 5432,
									"protocol": "TCP"
								}
							],
							"env": [
								{
									"name": "POSTGRESQL_DATABASE",
									"value": "${DATABASE_NAME}"
								},
								{
									"name": "POSTGRESQL_PASSWORD",
									"value": "${DATABASE_PASSWORD}"
								},
								{
									"name": "POSTGRESQL_USER",
									"value": "${DATABASE_USER}"
								}
							],
							"readinessProbe": {
								"timeoutSeconds": 1,
							  "initialDelaySeconds": 3,
							  "exec": {
								"command": [ "/bin/sh", "-i", "-c", "psql -h 127.0.0.1 -U ${DATABASE_USER} -q -d ${DATABASE_NAME} -c 'SELECT 1'"]                    
							  }
							},
							"livenessProbe": {
							  "timeoutSeconds": 1,
							  "initialDelaySeconds": 30,
							  "tcpSocket": {
								"port": 5432
							  }
							},
							"resources": {},
							"volumeMounts": [
								{
									"name": "${DATABASE_SERVICE_NAME}-data",
									"mountPath": "/var/lib/pgsql/data"
								}
							],
							"terminationMessagePath": "/dev/termination-log",
							"imagePullPolicy": "Always"
						}
					],
					"restartPolicy": "Always",
					"terminationGracePeriodSeconds": 30,
					"dnsPolicy": "ClusterFirst",
					"securityContext": {
                  "capabilities": {},
                  "privileged": false
                }
            },
			"restartPolicy": "Always",
            "dnsPolicy": "ClusterFirst"			
		},		
		"status": {}
	    }
    },
	{
      "kind": "Service",
      "apiVersion": "v1",
      "metadata": {
        "name": "${RPROXY_NAME}",
        "annotations": {
          "description": "Exposes and load balances the reverse proxy used for SiteMinder"
        }
      },
      "spec": {
        "ports": [
          {
            "name": "web",
			"protocol": "TCP",
            "port": 8080,
            "targetPort": 8080
          }
        ],
        "selector": {
          "name": "${RPROXY_NAME}"
        }
      }
    },
    {
      "kind": "Route",
      "apiVersion": "v1",
      "metadata": {
        "name": "${RPROXY_NAME}"
      },
      "spec": {
        "host": "${APPLICATION_DOMAIN}",		
        "to": {
          "kind": "Service",
          "name": "${RPROXY_NAME}"
		},
		"tls": {
            "termination": "edge"
        },
        "wildcardPolicy": "None"
        }
    },
	{
		"kind": "DeploymentConfig",
		"apiVersion": "v1",
		"metadata": {
			"name": "${RPROXY_NAME}",
			"generation": 1,
			"creationTimestamp": null,
			"labels": {
				"app": "${RPROXY_NAME}"
			}
		},
		"spec": {
			"strategy": {
				"type": "Rolling",
				"rollingParams": {
					"updatePeriodSeconds": 1,
					"intervalSeconds": 1,
					"timeoutSeconds": 600,
					"maxUnavailable": "25%",
					"maxSurge": "25%"
				},
				"resources": {}
			},
			"triggers": [
				{
					"type": "ConfigChange"
				},
				{
					"type": "ImageChange",
					"imageChangeParams": {
						"automatic": true,
						"containerNames": [
							"${RPROXY_NAME}"
						],
						"from": {
							"kind": "ImageStreamTag",
							"namespace": "${APP_IMAGE_NAMESPACE}",
							"name": "${RPROXY_NAME}:${APP_DEPLOYMENT_TAG}"
						}
					}
				}
			],
			"replicas": 2,
			"test": false,
			"selector": {
				"app": "${RPROXY_NAME}",
				"deploymentconfig": "${RPROXY_NAME}"
			},
			"template": {
				"metadata": {
					"creationTimestamp": null,
					"labels": {
						"app": "${RPROXY_NAME}",
						"deploymentconfig": "${RPROXY_NAME}"
					}
				},
				"spec": {
					"containers": [
						{
							"name": "${RPROXY_NAME}",
							"image": " ",
							"ports": [
								{
									"containerPort": 8080,
									"protocol": "TCP"
								}
							],
							"env": [
								{
									"name": "NGINX_PROXY_HOST",
									"value": "${RPROXY_NAME}"
								},
								{
									"name": "NGINX_PROXY_URL",
									"value": "http://${FRONTEND_NAME}:8080"
								}
							],
							"resources": {},
							"terminationMessagePath": "/dev/termination-log",
							"imagePullPolicy": "Always"
						}
					],
					"restartPolicy": "Always",
					"terminationGracePeriodSeconds": 30,
					"dnsPolicy": "ClusterFirst",
					"securityContext": {}
				}
			}
		},
		"status": {}
	}

  ],
  "parameters": [
    {
	  "name": "APPLICATION_NAME",
      "displayName": "Application Name",
      "description": "The name given to the application",
      "required": true,
      "value": "schoolbus"
	},
    {
      "name": "FRONTEND_NAME",
      "displayName": "Frontend Name",
      "description": "The name assigned to all of the frontend objects defined in this template.",
      "required": true,
      "value": "frontend"
    },
	{
      "name": "MIDDLEWARE_NAME",
      "displayName": "Middleware Name",
      "description": "The name assigned to all of the middleware objects defined in this template.",
      "required": true,
      "value": "api-proxy"
    },
	{
      "name": "BACKEND_NAME",
      "displayName": "Backend Name",
      "description": "The name assigned to all of the backend objects defined in this template.",
      "required": true,
      "value": "server"
    },
	{
      "name": "RPROXY_NAME",
      "displayName": "Reverse Proxy Name (SiteMinder)",
      "description": "The name assigned to the objects used as a SiteMinder entry point (or Reverse Proxy).  Typcially this is an NGINX instance.",
      "required": true,
      "value": "cerberus"
    },
    {
      "name": "FRONTEND_MEMORY_LIMIT",
      "displayName": "Memory Limit",
      "description": "Maximum amount of memory the frontend container can use.",
      "value": "512Mi"
    },
    {
      "name": "MIDDLEWARE_MEMORY_LIMIT",
      "displayName": "Memory Limit",
      "description": "Maximum amount of memory the Middleware container can use.",
      "value": "512Mi"
    },	
    {
      "name": "BACKEND_MEMORY_LIMIT",
      "displayName": "Memory Limit",
      "description": "Maximum amount of memory the ASP.NET Core container can use.",
      "value": "512Mi"
    },
    {
      "name": "POSTGRESQL_MEMORY_LIMIT",
      "displayName": "Memory Limit (PostgreSQL)",
      "description": "Maximum amount of memory the PostgreSQL container can use.",
      "value": "512Mi"
    },
	{
      "name": "RPROXY_MEMORY_LIMIT",
      "displayName": "Memory Limit (Reverse Proxy)",
      "description": "Maximum amount of memory the reverse proxy container can use.",
      "value": "512Mi"
    },
    {
      "name": "APPLICATION_DOMAIN",
      "displayName": "Application Hostname",
      "description": "The exposed hostname that will route to the Node.js service, if left blank a value will be defaulted.",
      "value": ""
    },
    {
      "name": "DATABASE_SERVICE_NAME",
      "displayName": "Database Service Name",
      "value": "postgresql"
    },
    {
      "name": "DATABASE_USER",
      "displayName": "Database Username",
      "description": "Username for the PostgreSQL user that will be used for accessing the database.",
      "generate": "expression",
      "from": "user[A-Z0-9]{3}"
    },
    {
      "name": "DATABASE_PASSWORD",
      "displayName": "Database Password",
      "description": "Password for the PostgreSQL user that will be used for accessing the database.",
      "generate": "expression",
      "from": "[a-zA-Z0-9]{16}"
    },
    {
      "name": "DATABASE_NAME",
      "displayName": "Database Name",
      "value": "schoolbus"
    },
    {
      "name": "DATABASE_ADMIN_PASSWORD",
      "displayName": "Database Administrator Password",
      "description": "Password for the database admin user.",
      "generate": "expression",
      "from": "[a-zA-Z0-9]{16}"
    },
	{
      "name": "POSTGRES_IMAGE_NAMESPACE",
      "displayName": "postgres image namespace",
      "description": "The OpenShift Namespace where the postgres ImageStream resides.",
      "value": "openshift"
    },
    {
      "name": "PORT",
      "displayName": "Application port",
      "description": "Port that application is listening on for requests.",
      "value": "8080",
      "required": true
    },
    {
      "name": "FRONTEND_READINESS_PROBE_URL",
      "displayName": "Frontend Readiness probe URL",
      "description": "URL that can be used to determine if application is 'ready'.",
      "value": "/",
      "required": true
    },
    {
      "name": "FRONTEND_LIVENESS_PROBE_URL",
      "displayName": "Frontend Liveness probe URL",
      "description": "URL that can be used to determine if application is 'live'.",
      "value": "/",
      "required": true
    },	
	{
      "name": "BACKEND_READINESS_PROBE_URL",
      "displayName": "Backend Readiness probe URL",
      "description": "URL that can be used to determine if application is 'ready'.",
      "value": "/",
      "required": true
    },
    {
      "name": "BACKEND_LIVENESS_PROBE_URL",
      "displayName": "Backend Liveness probe URL",
      "description": "URL that can be used to determine if Backend application is 'live'.",
      "value": "/",
      "required": true
    },
    {
      "name": "DATABASE_VOLUME_CAPACITY",
      "displayName": "Database Volume Capacity",
      "description": "Volume space available for postgres database, e.g. 512Mi, 2Gi.",
      "value": "1Gi",
      "required": true
    },
    {
      "name": "DOCUMENT_VOLUME_CAPACITY",
      "displayName": "Document Volume Capacity",
      "description": "Volume space available for Document uploads, e.g. 512Mi, 2Gi.",
      "value": "1Gi",
      "required": true
    },
    {
      "name": "DOCUMENT_MOUNT_PATH",
      "displayName": "Document Mount Path",
      "description": "Path in container where document volume should be mounted.",
      "value": "/uploads",
      "required": true
    },
    {
      "name": "SCHOOLBUS_ADMINPW",
      "displayName": "Schoolbus Admin password",
      "description": "Initital Schoolbus Admin password.",
      "generate": "expression",
      "from": "[a-zA-Z0-9]{16}"
    },
    {
      "name": "FRONTEND_IMAGE_NAME",
      "displayName": "Application Frontend image name.",
      "description": "Application Frontend image name.",
      "value": "client",
      "required": true
    },
	{
      "name": "MIDDLEWARE_IMAGE_NAME",
      "displayName": "Application Middleware image name.",
      "description": "Application Middleware image name.",
      "value": "api-proxy",
      "required": true
    },
	{
      "name": "BACKEND_IMAGE_NAME",
      "displayName": "Application Backend image name.",
      "description": "Application Backend image name.",
      "value": "server",
      "required": true
    },
    {
      "name": "APP_IMAGE_NAMESPACE",
      "displayName": "Namespace containing application images.",
      "description": "Namespace containing application images.",
      "value": "tran-schoolbus-tools",
      "required": true
    },
    {
      "name": "APP_DEPLOYMENT_TAG",
      "displayName": "Image tag to watch for changes and trigger deployment.",
      "description": "Image tag to watch for changes and trigger deployment.",
      "value": "dev",
      "required": true
    }
  ]
}